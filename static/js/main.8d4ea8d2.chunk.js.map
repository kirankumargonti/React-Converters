{"version":3,"sources":["Components/CurrencyConverter.jsx","Components/PercentageConverter.jsx","Components/Home.jsx","Components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["CurrencyConverter","props","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","className","value","onChange","map","option","key","type","placeholder","PercentageConverter","percentage","onChangePercentage","class","maxLength","Home","toAmount","fromAmount","toPercentage","fromPercentage","apiURL","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","setPercentage","valueInFromPercentage","setValueInFromPercentage","alert","useEffect","fetch","then","res","json","data","firstCurrencyOption","Object","keys","rates","base","e","target","Navbar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-haspopup","aria-labelledby","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d4ea8d2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function CurrencyConverter(props) {\r\n  const {\r\n    currencyOptions,\r\n    selectedCurrency,\r\n    onChangeCurrency,\r\n    onChangeAmount,\r\n    amount\r\n  } = props;\r\n  return (\r\n    <div className=\"currency-converter\">\r\n      <select\r\n        value={selectedCurrency}\r\n        onChange={onChangeCurrency}\r\n        className=\"custom-select mr-sm-2\"\r\n      >\r\n        {currencyOptions.map(option => (\r\n          <option key={option} value={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <input\r\n        type=\"tel\"\r\n        value={amount}\r\n        onChange={onChangeAmount}\r\n        placeholder=\"Currency\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nfunction PercentageConverter(props) {\r\n  const { percentage, onChangePercentage } = props;\r\n  return (\r\n    <div className=\"percentage-converter\">\r\n      <div class=\"input-group mb-2\">\r\n        <div class=\"input-group-prepend\">\r\n          <div class=\"input-group-text\">CGPA To %</div>\r\n        </div>\r\n        <input\r\n          type=\"tel\"\r\n          maxLength=\"10\"\r\n          onChange={onChangePercentage}\r\n          value={percentage}\r\n          className=\"form-control\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PercentageConverter;\r\n","import React, { useState, useEffect } from 'react';\r\nimport CurrencyConverter from './CurrencyConverter';\r\nimport PercentageConverter from './PercentageConverter';\r\n\r\nexport default function Home() {\r\n  const apiURL = 'https://api.exchangeratesapi.io/latest';\r\n\r\n  // Currency Converter\r\n  const [currencyOptions, setCurrencyOptions] = useState([]);\r\n  const [fromCurrency, setFromCurrency] = useState();\r\n  const [toCurrency, setToCurrency] = useState();\r\n  const [exchangeRate, setExchangeRate] = useState(1);\r\n  const [amount, setAmount] = useState(1);\r\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true);\r\n\r\n  // Percentage Converter\r\n  const [percentage, setPercentage] = useState(1);\r\n  const [valueInFromPercentage, setValueInFromPercentage] = useState(true);\r\n\r\n  // Currency Converter\r\n\r\n  let toAmount, fromAmount;\r\n  if (amountInFromCurrency) {\r\n    fromAmount = amount;\r\n    toAmount = amount * exchangeRate;\r\n  } else {\r\n    toAmount = amount;\r\n    fromAmount = amount / exchangeRate;\r\n  }\r\n\r\n  // Percentage Converter\r\n\r\n  let toPercentage, fromPercentage;\r\n  if (valueInFromPercentage) {\r\n    fromPercentage = percentage;\r\n    if (fromPercentage >= 11) {\r\n      alert('CGPA can only be between 0-10');\r\n    } else {\r\n      toPercentage = percentage * 9.5;\r\n    }\r\n  } else {\r\n    toPercentage = percentage;\r\n    if(toPercentage >=101) {\r\n      alert('Percentage can only be between 0-100');\r\n    } else {\r\n      fromPercentage = percentage / 9.5;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch(apiURL)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        const firstCurrencyOption = Object.keys(data.rates)[0];\r\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\r\n        setFromCurrency(data.base);\r\n        setToCurrency(firstCurrencyOption);\r\n        setExchangeRate(data.rates[firstCurrencyOption]);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (fromCurrency != null && toCurrency != null) {\r\n      fetch(`${apiURL}?base=${fromCurrency}&symbols=${toCurrency}`)\r\n        .then(res => res.json())\r\n        .then(data => setExchangeRate(data.rates[toCurrency]));\r\n    }\r\n  }, [fromCurrency, toCurrency]);\r\n\r\n  // Currency Converter\r\n  function handleFromAmountChange(e) {\r\n    setAmount(e.target.value);\r\n    setAmountInFromCurrency(true);\r\n  }\r\n  function handleToAmountChange(e) {\r\n    setAmount(e.target.value);\r\n    setAmountInFromCurrency(false);\r\n  }\r\n\r\n  // Percentage Converter\r\n  function handleFromPercentage(e) {\r\n    setPercentage(e.target.value);\r\n    setValueInFromPercentage(true);\r\n  }\r\n  function handleToPercentage(e) {\r\n    setPercentage(e.target.value);\r\n    setValueInFromPercentage(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <section class=\"banner\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-6\">\r\n              <div className=\"banner-left\">\r\n                <h1 className=\"text-capitalize\">welcome to Convert Anything</h1>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6\">\r\n              <div className=\"banner-right\">\r\n                <h1>Convert Currency</h1>\r\n                <CurrencyConverter\r\n                  currencyOptions={currencyOptions}\r\n                  selectedCurrency={fromCurrency}\r\n                  onChangeCurrency={e => setFromCurrency(e.target.value)}\r\n                  onChangeAmount={handleFromAmountChange}\r\n                  amount={fromAmount}\r\n                />\r\n\r\n                <CurrencyConverter\r\n                  currencyOptions={currencyOptions}\r\n                  selectedCurrency={toCurrency}\r\n                  onChangeCurrency={e => setToCurrency(e.target.value)}\r\n                  onChangeAmount={handleToAmountChange}\r\n                  amount={toAmount}\r\n                />\r\n\r\n                <h1>Convert CGPA to %</h1>\r\n\r\n                <PercentageConverter\r\n                  percentage={fromPercentage}\r\n                  onChangePercentage={handleFromPercentage}\r\n                />\r\n                <PercentageConverter\r\n                  percentage={toPercentage}\r\n                  onChangePercentage={handleToPercentage}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav class=\"navbar navbar-expand-md navbar-light fixed-top\">\r\n        <div className=\"container\">\r\n          <h1 class=\"navbar-brand\">\r\n            Convert Anything\r\n          </h1>\r\n          <button\r\n            class=\"navbar-toggler d-lg-none\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#collapsibleNavId\"\r\n            aria-controls=\"collapsibleNavId\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div class=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n            <ul class=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n            <li class=\"nav-item dropdown\">\r\n              <p class=\"nav-link dropdown-toggle\" id=\"dropdownId\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Convert to</p>\r\n              <div class=\"dropdown-menu\" aria-labelledby=\"dropdownId\">\r\n                <p class=\"dropdown-item\" >Currency Converter</p>\r\n                <p class=\"dropdown-item\" >Percentage Converter</p>\r\n              </div>\r\n            </li>\r\n              <li class=\"nav-item\">\r\n                <p class=\"nav-link\">\r\n                 About\r\n                </p>\r\n              </li>\r\n              <li class=\"nav-item\">\r\n                <p class=\"nav-link\">\r\n                  Contact\r\n                </p>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Home from './Components/Home';\nimport Navbar from './Components/Navbar';\n\nfunction App() {\n  return (\n    <>\n      <Navbar />\n      <Home />\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}